-------------------------- First: --------------------------
abstract_declarator:  '('  '*'  '['
abstract_declarator_tail:  '('  '['  'empty'
add_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
add_expr_tail:  '+'  '-'  'empty'
alignment_spec:  '_Alignas'
alignment_spec_tail::  '!'  '&'  '('  ')'  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
and_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
and_expr_tail:  '&'  'empty'
args_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'empty'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
args_list_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
args_list_expr_tail:  ','  'empty'
array_size:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'empty'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
assign_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
assign_expr_tail:  'empty'
assign_oper:
block_item:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '~'
block_item_list:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'empty'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '~'
cast_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
compound_stat:  '{'
cond_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
cond_expr_tail:  '?'  'empty'
const_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
constant:  'enum_const'  'float_const'  'int_const'
decl:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
decl_list:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
decl_list_tail:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
decl_spec:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
decl_spec_tail:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
declarator:  '('  '*'  'ident'
designation:  '.'  '['
designator:  '.'  '['
designator_list:  '.'  '['
designator_list_tail:  '.'  '['  'empty'
direct_abstract_declarator:  '('  '['
direct_abstract_declarator_tail:  '('  '['  'empty'
direct_declarator:  '('  'ident'
direct_declarator_tail:  '('  '['  'empty'
else_stat:  'else'  'empty'
enum_list:  'ident'
enum_list_tail:  ','  'empty'
enum_spec:  'enum_ident'  'enum_ident_{'  'enum_{'
enum_spec_tail:  'ident'
enumerator:  'ident'
enumerator_tail:  '='  'empty'
equal_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
equal_expr_tail:  '!='  '=='  'empty'
expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
expr_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
expr_tail:  ','  'empty'
extern_decl:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
for_head:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'ident'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  '~'
for_stat:  'for'
func_def:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
func_def_tail:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  '{'
func_spec:  'inline'  'noreturn'
generic:  '_Generic'
generic_assoc:  '_Bool'  '_Complex'  '_Imaginary'  'atomic'  'char'  'const'  'default'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
generic_assoc_list:  '_Bool'  '_Complex'  '_Imaginary'  'atomic'  'char'  'const'  'default'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
generic_assoc_list_tail:  ','  'empty'
ident_list:  'empty'
if_stat:  'if'
init_decl:  '('  '*'  'ident'
init_decl_list:  '('  '*'  'empty'  'ident'
init_decl_list_tail:  ','  'empty'
init_decl_tail:  '='  'empty'
initializer:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '{'  '~'
initializer_list:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '.'  '['  '_Alignof'  '_Generic'  'empty'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '{'  '~'
initializer_list_tail:  ','
inside_the_paren:  '('  '*'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
jump_stat:  'break'  'continue'  'goto'  'return'
label_stat:  'case'  'default'  'ident'
land_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
land_expr_tail:  '&&'  'empty'
lor_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
lor_expr_tail:  'empty'  '||'
mul_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
mul_expr_tail:  '%'  '*'  '/'  'empty'
or_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
or_expr_tail:  'empty'  '|'
param_decl:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
param_decl_tail:  '('  '*'  'empty'  'ident'
param_list:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
param_type_list:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
pointer:  '*'
pointer_tail:  '*'  'atomic'  'const'  'empty'  'restrict'  'volatile'
post_expr:  '('  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'string'
post_expr_tail:  '('  '++'  '--'  '->'  '.'  '['  'empty'
prim_expr:  '('  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'string'
rela_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
rela_expr_tail:  '<'  '<='  '>'  '>='  'empty'
shift_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
shift_expr_tail:  '<<'  '>>'  'empty'
sizeof_operand:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
spec_qual_list:  '_Bool'  '_Complex'  '_Imaginary'  'atomic'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
spec_qual_list_tail:  '_Bool'  '_Complex'  '_Imaginary'  'atomic'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignof'  '_Generic'  'break'  'case'  'continue'  'default'  'do'  'enum_const'  'float_const'  'for'  'goto'  'ident'  'if'  'int_const'  'return'  'sizeof'  'string'  'switch'  'while'  '{'  '~'
static_assert_decl:  '_Static_assert'
storage_spec:  '_Thread_local'  'auto'  'extern'  'register'  'static'  'typedef'
struct_decl:  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  'atomic'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
struct_decl_list:  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  'atomic'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
struct_declarator:  '('  '*'  ':'  'ident'
struct_declarator_list:  '('  '*'  ':'  'empty'  'ident'
struct_declarator_list_tail:  ','  'empty'
struct_declarator_tail:  ':'  'empty'
struct_or_union_spec:  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'
struct_or_union_spec_tail:  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  'atomic'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'  '}'
switch_stat:  'switch'
tran_unit:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'empty'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
type_name:  '_Bool'  '_Complex'  '_Imaginary'  'atomic'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'
type_name_tail:  '('  '*'  '['  'empty'
type_qual:  'atomic'  'const'  'restrict'  'volatile'
type_qual_list:  'atomic'  'const'  'empty'  'restrict'  'volatile'
type_spec:  '_Bool'  '_Complex'  '_Imaginary'  'char'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'
unary_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
unary_oper:  '!'  '&'  '*'  '+'  '-'  '~'
while_stat:  'do'  'while'
xor_expr:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
xor_expr_tail:  '^'  'empty'
-------------------------- Follow: --------------------------
abstract_declarator:  ')'  ':'
abstract_declarator_tail:  ')'  ':'
add_expr:  '!='  '&&'  '&'  ')'  ','  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
add_expr_tail:  '!='  '&&'  '&'  ')'  ','  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
alignment_spec:  '('  '*'  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
alignment_spec_tail::
and_expr:  '&&'  ')'  ','  ':'  ';'  '?'  ']'  '^'  'opt:,'  '|'  '||'
and_expr_tail:  '&&'  ')'  ','  ':'  ';'  '?'  ']'  '^'  'opt:,'  '|'  '||'
args_expr:  ')'
args_list_expr:  ')'
args_list_expr_tail:  ')'
array_size:  ']'
assign_expr:  ')'  ','  ':'  ';'  ']'
assign_expr_tail:  ')'  ','
assign_oper:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
block_item:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
block_item_list:  '}'
cast_expr:  '!='  '%'  '&&'  '&'  ')'  '*'  '+'  ','  '-'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
compound_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
cond_expr:  ')'  ','  ':'  ';'  ']'  'opt:,'
cond_expr_tail:  ')'  ','  ':'  ';'  ']'  'opt:,'
const_expr:  ')'  ','  ':'  ';'  ']'  'opt:,'
constant:  #  '!='  '%'  '&&'  '&'  '('  ')'  '*'  '+'  '++'  ','  '-'  '--'  '->'  '.'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  '['  ']'  '^'  'opt:,'  '|'  '||'
decl:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
decl_list:  '{'
decl_list_tail:  '{'
decl_spec:  '('  '*'  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
decl_spec_tail:  '('  '*'  'ident'
declarator:  ')'  ','  ':'  ';'  '='  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  '{'
designation:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '{'  '~'
designator:  '.'  '='  '['
designator_list:  '='
designator_list_tail:  '='
direct_abstract_declarator:  ')'  ':'
direct_abstract_declarator_tail:  ')'  ':'
direct_declarator:  ')'  ','  ':'  ';'  '='  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  '{'
direct_declarator_tail:  ')'  ','  ':'  ';'  '='  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  '{'
else_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
enum_list:  'opt:,'
enum_list_tail:  'opt:,'
enum_spec:  '('  ')'  '*'  ':'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
enum_spec_tail:  '('  ')'  '*'  ':'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
enumerator:  ','  'opt:,'
enumerator_tail:  ','  'opt:,'
equal_expr:  '&&'  '&'  ')'  ','  ':'  ';'  '?'  ']'  '^'  'opt:,'  '|'  '||'
equal_expr_tail:  '&&'  '&'  ')'  ','  ':'  ';'  '?'  ']'  '^'  'opt:,'  '|'  '||'
expr:  ')'  ':'  ';'  ']'
expr_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
expr_tail:  ')'  ':'  ';'  ']'
extern_decl:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
for_head:  ')'
for_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
func_def:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
func_def_tail:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
func_spec:  '('  '*'  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
generic:  #  '!='  '%'  '&&'  '&'  '('  ')'  '*'  '+'  '++'  ','  '-'  '--'  '->'  '.'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  '['  ']'  '^'  'opt:,'  '|'  '||'
generic_assoc:  ')'  ','
generic_assoc_list:  ')'
generic_assoc_list_tail:  ')'
ident_list:  ')'
if_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
init_decl:  ','  ';'
init_decl_list:  ';'
init_decl_list_tail:  ';'
init_decl_tail:  ','  ';'
initializer:  ','  ';'
initializer_list:  'opt:,'
initializer_list_tail:  'opt:,'
inside_the_paren:  ')'
jump_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
label_stat:  'while'  '}'
land_expr:  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'  '||'
land_expr_tail:  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'  '||'
lor_expr:  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'
lor_expr_tail:  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'
mul_expr:  '!='  '&&'  '&'  ')'  '+'  ','  '-'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
mul_expr_tail:  '!='  '&&'  '&'  ')'  '+'  ','  '-'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
or_expr:  '&&'  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'  '||'
or_expr_tail:  '&&'  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'  '||'
param_decl:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
param_decl_tail:  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
param_list:  ')'
param_type_list:  'opt:,...'
pointer:  '('  ')'  ':'  '['  'ident'
pointer_tail:  '('  'ident'
post_expr:  '!='  '%'  '&&'  '&'  ')'  '*'  '+'  ','  '-'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
post_expr_tail:  '!='  '%'  '&&'  '&'  ')'  '*'  '+'  ','  '-'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
prim_expr:  #  '!='  '%'  '&&'  '&'  '('  ')'  '*'  '+'  '++'  ','  '-'  '--'  '->'  '.'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  '['  ']'  '^'  'opt:,'  '|'  '||'
rela_expr:  '!='  '&&'  '&'  ')'  ','  ':'  ';'  '=='  '?'  ']'  '^'  'opt:,'  '|'  '||'
rela_expr_tail:  '!='  '&&'  '&'  ')'  ','  ':'  ';'  '=='  '?'  ']'  '^'  'opt:,'  '|'  '||'
shift_expr:  '!='  '&&'  '&'  ')'  ','  ':'  ';'  '<'  '<='  '=='  '>'  '>='  '?'  ']'  '^'  'opt:,'  '|'  '||'
shift_expr_tail:  '!='  '&&'  '&'  ')'  ','  ':'  ';'  '<'  '<='  '=='  '>'  '>='  '?'  ']'  '^'  'opt:,'  '|'  '||'
sizeof_operand:  '!='  '%'  '&&'  '&'  ')'  '*'  '+'  ','  '-'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
spec_qual_list:  '('  ')'  '*'  ':'  '['  'ident'
spec_qual_list_tail:  '('  '*'  ':'  'ident'
stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
static_assert_decl:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
storage_spec:  '('  '*'  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
struct_decl:  '_Bool'  '_Complex'  '_Imaginary'  '_Static_assert'  'atomic'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'float'  'int'  'long'  'restrict'  'short'  'signed'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef_name'  'unsigned'  'void'  'volatile'  '}'
struct_decl_list:  '}'
struct_declarator:  ','  ';'
struct_declarator_list:  ';'
struct_declarator_list_tail:  ';'
struct_declarator_tail:  ','  ';'
struct_or_union_spec:  '('  ')'  '*'  ':'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
struct_or_union_spec_tail:  '('  ')'  '*'  ':'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
switch_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
tran_unit:
type_name:  ')'  ':'
type_name_tail:  ')'  ':'
type_qual:  '('  ')'  '*'  ':'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
type_qual_list:  '*'
type_spec:  '('  ')'  '*'  ':'  '['  '_Alignas'  '_Bool'  '_Complex'  '_Imaginary'  '_Thread_local'  'atomic'  'auto'  'char'  'const'  'double'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'ident'  'inline'  'int'  'long'  'noreturn'  'opt:,...'  'register'  'restrict'  'short'  'signed'  'static'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'
unary_expr:  '!='  '%'  '&&'  '&'  ')'  '*'  '+'  ','  '-'  '/'  ':'  ';'  '<'  '<<'  '<='  '=='  '>'  '>='  '>>'  '?'  ']'  '^'  'opt:,'  '|'  '||'
unary_oper:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  '_Alignof'  '_Generic'  'enum_const'  'float_const'  'ident'  'int_const'  'sizeof'  'string'  '~'
while_stat:  '!'  '&'  '('  '*'  '+'  '++'  '-'  '--'  ';'  '_Alignas'  '_Alignof'  '_Bool'  '_Complex'  '_Generic'  '_Imaginary'  '_Static_assert'  '_Thread_local'  'atomic'  'auto'  'break'  'case'  'char'  'const'  'continue'  'default'  'do'  'double'  'enum_const'  'enum_ident'  'enum_ident_{'  'enum_{'  'extern'  'float'  'float_const'  'for'  'goto'  'ident'  'if'  'inline'  'int'  'int_const'  'long'  'noreturn'  'register'  'restrict'  'return'  'short'  'signed'  'sizeof'  'static'  'string'  'struct|union_ident'  'struct|union_ident_{'  'struct|union_{'  'switch'  'typedef'  'typedef_name'  'unsigned'  'void'  'volatile'  'while'  '{'  '}'  '~'
xor_expr:  '&&'  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'  '|'  '||'
xor_expr_tail:  '&&'  ')'  ','  ':'  ';'  '?'  ']'  'opt:,'  '|'  '||'
